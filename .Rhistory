### i.e. the probability treatment is cost effective
meanicesim2<-rep(NA,length(cRatiosim))
for (i in 1:length(cRatiosim)) {
incNMBsim2[,i]<-(QALY1_2*cRatiosim[i] - cost1_2)-
(QALY2_2*cRatiosim[i] - cost2_2)
}
for (j in 1:length(cRatiosim)) {
for (i in 1:nruns2) {
is.cost.effsim2[i,j][incNMBsim2[i,j]>0] <-1
}}
for (i in 1:length(cRatiosim)) {
meanicesim2[i]<-mean(is.cost.effsim2[,i])
}
lines(cRatiosim,meanicesim2, type="l",lty=2)
}
}
aic<- -2*weimodel_pps$loglik[2]+2*nrow(weimodel_pps$var);aic
load("allcombos.RData")
install.packages(c("stringi", "stringr"))
install.packages("shiny")
install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='francescotranquillo', token='CDB49E1CDC86A1A3A07304188654CBC3', secret='lOzdE88XaHPXnzDgIjxX7VfYHhbzD2Ko3PuRZCD8')
source('~/.active-rstudio-document', echo=TRUE)
install.packages("shinydashboard")
source('~/.active-rstudio-document', echo=TRUE)
install.packages(DT)
install.packages("dtables")
source('~/.active-rstudio-document', echo=TRUE)
install.packages('DT')
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
shiny::runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
shiny::runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
library(reshape2)
library(dplyr)
library(ggplot2)
library(plotly)
install.packages("plotly")
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
library(shiny)
library(shinydashboard)
library (DT)
library (ggplot2)
library (plotly)
library(reshape2)
install.packages("dplyr")
install.packages("plotly")
Sys.getenv("R_LIBS_USER")
install.packages(c('crayon', 'pbdZMQ', 'devtools'))
devtools::install_github(paste0('IRkernel/', c('repr', 'IRdisplay', 'IRkernel')))
IRkernel::installspec()
IRkernel::installspec(user = FALSE)
IRkernel::installspec()
install.packages(c("shiny","shinydashboard","DT","ggplot2","plotly","reshape2","data.table"))
shiny::runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
shiny::runApp('~/GitHub/Serena')
install.packages(c("shiny","shinydashboard","DT","ggplot2","plotly","reshape2","data.table"))
install.packages(c("shiny", "shinydashboard", "DT", "ggplot2", "plotly", "reshape2", "data.table"))
shiny::runApp('~/GitHub/Serena')
runApp('~/GitHub/Serena')
install.packages("data.table")
runApp('~/GitHub/Serena')
library(data.table)
install.packages("data.table")
install.packages("data.table")
runApp('~/GitHub/Serena')
install.packages("data.table", "c:/Users/Fra/Documents/R/win-library/3.4")
runApp('~/GitHub/Serena')
runApp('~/GitHub/Serena')
shiny::runApp('~/GitHub/Serena')
runApp('~/GitHub/Serena')
runApp('~/GitHub/Serena')
ggplotly(ggplot(empdata,aes_string(x="Dates", y="HeartRate"))
+geom_point(aes(color=ab(par, numb1, numb2)))
+geom_line()
+scale_color_manual(values=cases)
+theme(legend.position='none')
+geom_hline(thr, yintercept=numb1, color="red")
+geom_hline(thr, yintercept=numb2, color="red")
)
shiny::runApp('~/GitHub/Serena')
shiny::runApp('~/GitHub/Serena')
shiny::runApp('~/GitHub/Serena')
runApp('~/GitHub/Serena')
runApp('~/GitHub/Serena')
runApp('~/GitHub/Serena')
runApp('~/GitHub/Serena')
shiny::runApp('~/GitHub/Serena')
shiny::runApp('~/GitHub/Serena')
runApp('~/GitHub/Serena')
runApp('~/GitHub/Serena')
runApp('~/GitHub/Serena')
runApp('~/GitHub/Serena')
runApp('~/GitHub/Serena')
runApp('~/GitHub/Serena')
runApp('~/GitHub/Serena')
runApp('~/GitHub/Serena')
knit_with_parameters('~/Projects/NMSECORmd.Rmd')
install.packages(c("bit", "broom", "caTools", "curl", "data.table", "dbplyr", "devtools", "dplyr", "eha", "evaluate", "ggplot2", "git2r", "glue", "haven", "highr", "htmlTable", "httpuv", "later", "mstate", "munsell", "openssl", "packrat", "pillar", "plotly", "purrr", "Rcpp", "RCurl", "reprex", "rlang", "rmarkdown", "rsconnect", "stringi", "tidyr", "tinytex", "utf8", "yaml"))
install.packages("prettydoc")
library(ggplot2)
library(plotly)
#funzione di riduzione del prezzo:
# X è il prezzo iniziale,
# Y è il numero di unità vendute in una singola transazione
# Z è il tasso di riduzione
pr<-function(x) x-y*x*z
p<-ggplot(data=df(x=0), mapping=aes(x=x))
p+ stat_function((fun=pr))
#funzione di riduzione del prezzo:
# X è il prezzo iniziale,
# Y è il numero di unità vendute in una singola transazione
# Z è il tasso di riduzione
pr<-function(x) x-y*x*z
p<-ggplot(data=data.frame(x=0), mapping=aes(x=x))
p+ stat_function((fun=pr))
View(pr)
View(pr)
p<-ggplot(data=data.frame(x=0), mapping=aes(x=x))
p+ stat_function((fun=pr))
plotly(
y=700000-25*700000*0.3
)
plotly(
y=700000-25*700000*0.3,
type=scatter,
mode=lines
)
trace_0 <- rnorm(100, mean = 5)
trace_1 <- rnorm(100, mean = 0)
trace_2 <- rnorm(100, mean = -5)
x <- c(1:100)
data <- data.frame(x, trace_0, trace_1, trace_2)
p <- plot_ly(data, x = ~x, y = ~trace_0, name = 'trace 0', type = 'scatter', mode = 'lines') %>%
add_trace(y = ~trace_1, name = 'trace 1', mode = 'lines+markers') %>%
add_trace(y = ~trace_2, name = 'trace 2', mode = 'markers')
trace_0 <- rnorm(100, mean = 5)
trace_1 <- rnorm(100, mean = 0)
trace_2 <- rnorm(100, mean = -5)
x <- c(1:100)
data <- data.frame(x, trace_0, trace_1, trace_2)
p <- plot_ly(data, x = ~x, y = ~trace_0, name = 'trace 0', type = 'scatter', mode = 'lines') %>%
add_trace(y = ~trace_1, name = 'trace 1', mode = 'lines+markers') %>%
add_trace(y = ~trace_2, name = 'trace 2', mode = 'markers')
p
f <- pr-pr*y*z
x <- c(1:100)
data <- data.frame(x, f)
p <- plot_ly(data, x = ~x, y = ~f, name = 'riduzione prezzo', type = 'scatter', mode = 'lines') %>%
p
p <- plot_ly(data, x = ~x, y = ~f, name = 'riduzione prezzo', type = 'scatter', mode = 'lines') %>%
p
f <- pr-pr*y*z
f <- function(pr,y,z) pr-pr*y*z
x <- c(1:100)
data <- data.frame(x, f)
p <- plot_ly(data, x = ~x, y = ~f, name = 'riduzione prezzo', type = 'scatter', mode = 'lines') %>%
p
f <- function(pr,y,z) pr-pr*y*z
x <- c(1:100)
y<-c(1:100)
z<-c(1:100)
data <- data.frame(x, f)
p <- plot_ly(data, x = ~x, y = ~f, name = 'riduzione prezzo', type = 'scatter', mode = 'lines') %>%
p
trace_0 <- rnorm(100, mean = 5)
trace_1 <- rnorm(100, mean = 0)
trace_2 <- rnorm(100, mean = -5)
x <- c(1:100)
data <- data.frame(x, trace_0, trace_1, trace_2)
p <- plot_ly(data, x = ~x, y = ~trace_0, name = 'trace 0', type = 'scatter', mode = 'lines') %>%
add_trace(y = ~trace_1, name = 'trace 1', mode = 'lines+markers') %>%
add_trace(y = ~trace_2, name = 'trace 2', mode = 'markers')
p
p <- plot_ly(data, x = ~x, y = ~trace_0, name = 'trace 0', type = 'scatter', mode = 'lines') %>%
add_trace(y = ~trace_2, name = 'trace 2', mode = 'markers') %>%
title = "Drop down menus - Styling",
xaxis = list(domain = c(0.1, 1)),
yaxis = list(title = "y"),
updatemenus = list(
list(
y = 0.8,
buttons = list(
list(method = "restyle",
args = list("line.color", "blue"),
label = "Blue"),
list(method = "restyle",
args = list("line.color", "red"),
label = "Red"))),
list(
y = 0.7,
buttons = list(
list(method = "restyle",
args = list("visible", list(TRUE, FALSE)),
label = "Sin"),
list(method = "restyle",
args = list("visible", list(FALSE, TRUE)),
label = "Cos")))
)
p <- plot_ly(data, x = ~x, y = ~trace_0, name = 'trace 0', type = 'scatter', mode = 'lines') %>%
add_trace(y = ~trace_1, name = 'trace 1', mode = 'lines+markers') %>%
add_trace(y = ~trace_2, name = 'trace 2', mode = 'markers') %>%
layout(
title = "Drop down menus - Styling",
xaxis = list(domain = c(0.1, 1)),
yaxis = list(title = "y"),
updatemenus = list(
list(
y = 0.8,
buttons = list(
list(method = "restyle",
args = list("line.color", "blue"),
label = "Blue"),
list(method = "restyle",
args = list("line.color", "red"),
label = "Red"))),
list(
y = 0.7,
buttons = list(
list(method = "restyle",
args = list("visible", list(TRUE, FALSE)),
label = "Sin"),
list(method = "restyle",
args = list("visible", list(FALSE, TRUE)),
label = "Cos")))
)
)
p <- plot_ly(data, x = ~x, y = ~trace_0, name = 'trace 0', type = 'scatter', mode = 'lines') %>%
add_trace(y = ~trace_1, name = 'trace 1', mode = 'lines+markers') %>%
add_trace(y = ~trace_2, name = 'trace 2', mode = 'markers') %>%
layout(
title = "Drop down menus - Styling",
xaxis = list(domain = c(0.1, 1)),
yaxis = list(title = "y"),
updatemenus = list(
list(
y = 0.8,
buttons = list(
list(method = "restyle",
args = list("line.color", "blue"),
label = "Blue"),
list(method = "restyle",
args = list("line.color", "red"),
label = "Red"))),
list(
y = 0.7,
buttons = list(
list(method = "restyle",
args = list("visible", list(TRUE, FALSE)),
label = "Sin"),
list(method = "restyle",
args = list("visible", list(FALSE, TRUE)),
label = "Cos")))
)
)
p <- plot_ly(data, x = ~x, y = ~trace_0, name = 'trace 0', type = 'scatter', mode = 'lines') %>%
add_trace(y = ~trace_1, name = 'trace 1', mode = 'lines+markers') %>%
add_trace(y = ~trace_2, name = 'trace 2', mode = 'markers') %>%
layout(
title = "Drop down menus - Styling",
xaxis = list(domain = c(0.1, 1)),
yaxis = list(title = "y"),
updatemenus = list(
list(
y = 0.8,
buttons = list(
list(method = "restyle",
args = list("line.color", "blue"),
label = "Blue"),
list(method = "restyle",
args = list("line.color", "red"),
label = "Red"))),
list(
y = 0.7,
buttons = list(
list(method = "restyle",
args = list("visible", list(TRUE, FALSE)),
label = "Sin"),
list(method = "restyle",
args = list("visible", list(FALSE, TRUE)),
label = "Cos")))
)
)
p
p <- plot_ly(data, x = ~x, y = ~trace_0, name = 'trace 0', type = 'scatter', mode = 'lines') %>%
layout(
title = "Drop down menus - Styling",
xaxis = list(domain = c(0.1, 1)),
yaxis = list(title = "y"),
updatemenus = list(
list(
y = 0.8,
buttons = list(
list(method = "restyle",
args = list("line.color", "blue"),
label = "Blue"),
list(method = "restyle",
args = list("line.color", "red"),
label = "Red"))),
list(
y = 0.7,
buttons = list(
list(method = "restyle",
args = list("visible", list(TRUE, FALSE)),
label = "Sin"),
list(method = "restyle",
args = list("visible", list(FALSE, TRUE)),
label = "Cos")))
)
)
p
library(plotly)
df<-read.csv("data.csv", header = TRUE, sep = ";", dec= ",", stringsAsFactors = FALSE)
View(data)
View(data)
df<-read.csv("data.csv", header = TRUE, sep = ";", dec= ",", stringsAsFactors = FALSE)
View(df)
library(plotly)
library(ggplot2)
library(reshape2)
library(plyr)
library(ggpubr)
library(gridExtra)
library(tidyverse)
library(ggridges)
setwd("C://Users//Fra//Documents//Projects")
df<-read.csv("nmseco.csv", header = TRUE, sep = ",", dec= ",", stringsAsFactors = FALSE)
df$Dominant.Race<-as.factor(df$Dominant.Race)
df$Economy.Type<-as.factor(df$Economy.Type)
df$Sell....<-as.numeric(df$Sell....)
df$Buy....<-as.numeric(df$Buy....)
df$Total<-as.numeric(df$Total)
df$Economy.Strength.Numeric<-as.factor(df$Economy.Strength.Numeric)
df$Economy.Strength<-as.factor(df$Economy.Strength)
df$Conflict.Level<-as.factor((df$Conflict.Level))
df$Star.Colour<-as.factor(df$Star.Colour)
df$Economy.Strength.Numeric<- revalue(df$Economy.Strength.Numeric,c("1"="Povero","2"="Medio","3"="Ricco"))
cols<-c("Blue"="#00aedb", "Green"="#00b159", "Red"="#d11141", "Yellow"="#ffc425")
ric<-c("3"="Rich","2"="Average","1"="Poor")
razze<-c("greenyellow","royalblue", "coral2")
ggplotly(ggplot(df, aes(Dominant.Race))+
geom_bar(alpha=0.7,aes(fill=Dominant.Race), width = 0.6)+
scale_fill_manual(name= "Razza \nDominante", values=c("Gek"="greenyellow","Korvax"="royalblue", "Vy'keen"="coral2"))+
geom_text(stat="count", aes(label=..count.., y=..count..+2))+
ylab("Contegggio")+
xlab("Razza Dominante")+
ggtitle("Frequenza delle razze dominanti")+
theme_classic()
#axis.text.y = element_blank(), axis.ticks.y = element_blank()
)
ggplotly(ggplot(df, aes(Dominant.Race))+
geom_bar(alpha=0.7,aes(fill=Dominant.Race), width = 0.6)+
scale_fill_manual(name= "Razza \nDominante", values=c("Gek"="greenyellow","Korvax"="royalblue", "Vy'keen"="coral2"))+
geom_text(stat="count", aes(label=..count.., y=..count..+2))+
ylab("Contegggio")+
xlab("Razza Dominante")+
ggtitle("Frequenza delle razze dominanti")+
theme_classic()
#axis.text.y = element_blank(), axis.ticks.y = element_blank()
)
p<-ggplotly(ggplot(df, aes(Dominant.Race))+
geom_bar(alpha=0.7,aes(fill=Dominant.Race), width = 0.6)+
scale_fill_manual(name= "Razza \nDominante", values=c("Gek"="greenyellow","Korvax"="royalblue", "Vy'keen"="coral2"))+
geom_text(stat="count", aes(label=..count.., y=..count..+2))+
ylab("Contegggio")+
xlab("Razza Dominante")+
ggtitle("Frequenza delle razze dominanti")+
theme_classic()
#axis.text.y = element_blank(), axis.ticks.y = element_blank()
htmlwidgets::saveWidget(as.widget(p), "graph.html")
p<-ggplotly(ggplot(df, aes(Dominant.Race))+
geom_bar(alpha=0.7,aes(fill=Dominant.Race), width = 0.6)+
scale_fill_manual(name= "Razza \nDominante", values=c("Gek"="greenyellow","Korvax"="royalblue", "Vy'keen"="coral2"))+
geom_text(stat="count", aes(label=..count.., y=..count..+2))+
ylab("Contegggio")+
xlab("Razza Dominante")+
ggtitle("Frequenza delle razze dominanti")+
theme_classic()
)
#axis.text.y = element_blank(), axis.ticks.y = element_blank()
htmlwidgets::saveWidget(as.widget(p), "graph.html")
)
p<-ggplotly(ggplot(df, aes(Dominant.Race))+
geom_bar(alpha=0.7,aes(fill=Dominant.Race), width = 0.6)+
scale_fill_manual(name= "Razza \nDominante", values=c("Gek"="greenyellow","Korvax"="royalblue", "Vy'keen"="coral2"))+
geom_text(stat="count", aes(label=..count.., y=..count..+2))+
ylab("Contegggio")+
xlab("Razza Dominante")+
ggtitle("Frequenza delle razze dominanti")+
theme_classic()
)
#axis.text.y = element_blank(), axis.ticks.y = element_blank()
htmlwidgets::saveWidget(as.widget(p), "graph.html")
install.packages("jekyllthat")
install.packages("jekylldown")
devtools::install_github("ColinFay/jekyllthat")
library(jekyllthat)
install.packages("servr")
# render_jekyll() # if you want to use jekyll code block highlighting
knit(arg.in, output = arg.md, envir = parent.frame())
# file ~/knit2md
require(knitr)
args <- commandArgs(T)
arg.in <- args[1]
arg.out <- args[2]
arg.fig <- args[3]
arg.url <- "/"
arg.base <- sub(".Rmd$", "", basename(arg.in))
arg.fig <- paste0(arg.fig, arg.base, "/")
arg.md <- paste0(arg.out, arg.base, ".md")
opts_knit$set(base.url = arg.url)
opts_chunk$set(fig.path = arg.fig)
opts_chunk$set(fig.cap = "center")
# render_jekyll() # if you want to use jekyll code block highlighting
knit(arg.in, output = arg.md, envir = parent.frame())
cd
setwd
setwd("~/GitHub/FrancescoTranquillo.github.io")
Rscript ~/FrancescoTranquillo.github.io EDA.Rmd
Rscript ~ EDA.Rmd
Rscript ~/knit2md EDA.Rmd
~/knit2md EDA.Rmd
knit2md EDA.Rmd
Rscript ~/knit2md _manuals/file.Rmd _manuals/ images/
Rscript EDA.Rmd assets/
source('~/GitHub/FrancescoTranquillo.github.io/Rscript.R', echo=TRUE)
source('~/GitHub/FrancescoTranquillo.github.io/Rscript.R')
Rscript EDA.Rmd assets/
Rscript ~/knit2md ~/EDA.Rmd assets/
Rscript ~/knit2md ~/EDA.Rmd assets/
Rscript ~knit2md ~/EDA.Rmd assets/
Rscript ~knit2md ~EDA.Rmd assets/
p
knit_htmlwidgets <- function(input,
output_dir = "./_includes/htmlwidgets",
...) {
file_name <- rev(unlist(strsplit(input, split = "/")))[1]
path <- rmarkdown::render(input, "html_document", output_dir = output_dir)
remove_doctype(path)
}
knit_htmlwidgets("EDA.Rmd")
remove_doctype <- function(input) {
html_lines <- readLines(input)
keep <- grep("^<!DOCTYPE html>$", html_lines, invert = TRUE)
writeLines(html_lines[keep], input)
}
knit_htmlwidgets("EDA.Rmd")
local({
# Your existing configurations...
# See https://github.com/yihui/knitr-jekyll/blob/gh-pages/build.R
brocks::htmlwidgets_deps(a)
})
knitr::knit()
knit {knitr}
knit
devtools::install_github("brendan-R/brocks")
devtools::install_github("brendan-R/brocks")
devtools::install_github("brendan-R/brocks")
